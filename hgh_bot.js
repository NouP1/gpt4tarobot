const TelegramBot = require('node-telegram-bot-api');
const { OpenAI } = require('openai');
const sequelize = require('./db.js');
const User = require('./models/user.js')
const { pay, startButtons } = require('./options.js')
require('dotenv').config();
const Redis = require('ioredis');
const { checkAndUpdateRequestLimit } = require('./serviceCheckLimits.js');
const { encodeImageToBase64 } = require('./serviceEncodeimage.js');
const { resetLimitRequest } = require('./serviceCron.js');
const { startBot } = require('./comandStart.js');
const { getResponseGPT } = require('./openaiServices.js/openAI.js');

const tgBotToken = process.env.TG_BOT_TOKEN;
const logChannelId =  process.env.LOG_CHANNEL_ID;
const subscriptionChannelId = process.env.SUBSCRIPTION_CHANNEL_ID;
const redis = new Redis();
const bot = new TelegramBot(tgBotToken, { polling: true });

resetLimitRequest();


bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.chat.username || 'Unknown';
    const userId = msg.from.id.toString();
    const userMessage = msg.text || msg.caption || '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    const mediaGroupId = msg.media_group_id;
    // console.log("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ msg:", JSON.stringify(msg, null, 2));

    try {
        typingInterval = setInterval(async () => {
            await bot.sendChatAction(chatId, 'typing');
        }, 4000);

        startBot(bot,userId,subscriptionChannelId,chatId,userMessage,username)
        // await bot.sendMessage(chatId, 'ü§ñ –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ü—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã');
//         const user = await User.findByPk(userId)
//         const isSubscribed = await checkChatMember(bot, subscriptionChannelId, userId, chatId);
//         if (!isSubscribed) {
//             await bot.sendMessage(
//                 chatId,
// `   –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.

// ‚≠êÔ∏è –ú—ã –ø—Ä–æ—Å–∏–º —Ç–∞–∫ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±–æ—Ç–æ–≤ –∏ –∑–∞ —ç—Ç–æ –º—ã –¥–∞—Ä–∏–º –≤–∞–º *5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ ChatGPT*. –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: [–ù–∞—à –∫–∞–Ω–∞–ª](https://t.me/${subscriptionChannelId})`,
//                  {parse_mode: 'Markdown', 
//                  reply_markup: startButtons.reply_markup,}
//             );
//             return;
            
//         }
        
        const isAllowed = await checkAndUpdateRequestLimit(userId, username);
        if (!isAllowed) {
            // await bot.sendMessage(chatId, 'ü§ñ –í–∞—à –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.', pay);
            await bot.sendMessage(chatId, 'ü§ñ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (5 –≤ —Å—É—Ç–∫–∏). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞.')
            return;
        }
        await bot.sendMessage(chatId, "ü§ñ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...");
console.log(msg.message_id)
      const response  = await getResponseGPT(bot,msg,chatId,username,logChannelId, userId)

        const botResponse = response.content.trim().replace(/[#*-]/g, '');
    if(botResponse) {
        await bot.sendMessage(chatId, botResponse);
    } else {
        await bot.sendMessage(chatId, "–ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)");
    }
        
        await bot.sendMessage(logChannelId, `–ß–∞—Ç: ${chatId}\n–û—Ç–≤–µ—Ç –±–æ—Ç–∞:\n ${botResponse}`);
        
    } catch (error) {
        const errorMessage = error.message || error.toString() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        console.error('–û—à–∏–±–∫–∞:', errorMessage);
        await bot.sendMessage(chatId, 'ü§ñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        await bot.sendMessage(logChannelId, `–ß–∞—Ç: ${chatId}\n–û—Ç–≤–µ—Ç –±–æ—Ç–∞:\n ${errorMessage}`);
    } finally {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        clearInterval(typingInterval);
    }
});

// bot.on('callback_query', async msg => {
//     try {
//         const data = msg.data;
//         const chatId = msg.message.chat.id;
//         const messageId = msg.message.message_id;
//         const userId = msg.from.id;

//         if (data === 'check') {

//             const isSubscribed = await checkChatMember(bot, subscriptionChannelId, userId, chatId);
//             if (isSubscribed) {
//                 await bot.editMessageText("–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ ‚Äî —è –ø–æ–º–æ–≥—É! üíö",
//                 {
//                 chat_id:chatId,
//                 message_id:messageId,
//                  });
//                 return;
//             }
//             await bot.editMessageText(
// `‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ [–Ω–∞—à –∫–∞–Ω–∞–ª](https://t.me/${subscriptionChannelId}) `,
//                 {
//                 chat_id:chatId,
//                 message_id:messageId,
//                 parse_mode: 'Markdown', 
//                 reply_markup: startButtons.reply_markup,}
//             );
//             return;

//         }

//     } catch (error) {
//         const errorMessage = error.message || error.toString() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
//         console.error('–û—à–∏–±–∫–∞:', errorMessage);
//         await bot.sendMessage(logChannelId, `\n–û—Ç–≤–µ—Ç –±–æ—Ç–∞:\n ${errorMessage}`);
//     }
// });

// console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
const startServer = async () => {
    try {
        await sequelize.authenticate();
        await sequelize.sync();
        console.log('Connected to database...');
    } catch (error) {
        console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î', error);
    }
};

startServer();